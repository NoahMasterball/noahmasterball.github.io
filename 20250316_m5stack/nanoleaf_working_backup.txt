import socket
import time
import machine
from machine import Pin

# üè† Nanoleaf API Einstellungen
NANOLEAF_IP = "10.80.23.56"
API_KEY = "kK2AbyyhXXNncr0Pw77RTy61pk3OrZnC"
BASE_URL = "/api/v1/{}/state".format(API_KEY)
PORT = 16021

# üéõ Button-Einstellungen
BUTTON_PIN = 41  # M5Stack Atom S3 Lite
button = Pin(BUTTON_PIN, Pin.IN, Pin.PULL_UP)

# üèÅ Anfangszustand
power_state = False  # Standardm√§√üig "Aus"

def send_put_request(state):
    """Sendet einen PUT-Request an die Nanoleaf-API, um die Panels an oder auszuschalten."""
    s = socket.socket()
    s.settimeout(3.0)  # Timeout auf 3 Sekunden (Float notwendig f√ºr MicroPython)
    try:
        print(f"üîÑ Verbinde zu Nanoleaf ({NANOLEAF_IP})...")
        s.connect((NANOLEAF_IP, PORT))

        # JSON-Payload f√ºr An/Aus
        payload = '{"on":{"value":' + ('true' if state else 'false') + '}}'
        request = (
            "PUT {} HTTP/1.1\r\n"
            "Host: {}\r\n"
            "Content-Type: application/json\r\n"
            "Content-Length: {}\r\n"
            "Connection: close\r\n\r\n"
            "{}"
        ).format(BASE_URL, NANOLEAF_IP, len(payload), payload)

        print(f"üì° Sende Request:\n{request}")
        s.send(request.encode())

        # Antwort empfangen mit Timeout
        response = b""
        start_time = time.time()
        print("‚è≥ Warte auf Antwort von Nanoleaf...")
        while time.time() - start_time < 5:  # Maximal 5s warten
            try:
                chunk = s.recv(1024)
                if chunk:
                    print(f"üì© Empfangenes Datenpaket: {chunk}")
                    response += chunk
                    if b'\r\n0\r\n\r\n' in response:  # Ende der √úbertragung erkannt
                        break
                else:
                    break
            except Exception as e:
                print(f"‚ùå Fehler beim Empfang: {e}")
                break

        response_decoded = response.decode(errors="ignore")

        # 204 No Content erkennen
        if "204 No Content" in response_decoded:
            print("‚úÖ Nanoleaf hat die Anfrage akzeptiert! (204 No Content)")
            return True  # Erfolg
        else:
            print(f"‚ö†Ô∏è Unerwartete Antwort: {response_decoded}")
            return False  # Fehler

    except Exception as e:
        print(f"‚ùå Fehler: {e}")
        return False  # Fehlerstatus zur√ºckgeben
    finally:
        s.close()
        print("üîå Verbindung geschlossen.")


# üé¨ Start: Warte auf Knopfdruck
print("üî¥ Bereit! Dr√ºcke den Knopf zum Umschalten!")

letzter_status = button.value()

while True:
    aktueller_status = button.value()

    if letzter_status == 1 and aktueller_status == 0:  # Knopf gedr√ºckt
        print("üîò Knopf gedr√ºckt! Schalte Nanoleaf um...")
        
        power_state = not power_state  # Zustand umkehren

        if send_put_request(power_state):  # Nanoleaf umschalten
            print(f"‚úÖ Nanoleaf ist jetzt {'AN' if power_state else 'AUS'}")
        else:
            print("‚ùå Fehler beim Senden. Versuch es sp√§ter erneut.")

        time.sleep(0.5)  # Entprellen, damit nicht mehrfach ausgel√∂st wird

    letzter_status = aktueller_status  # Status aktualisieren
    time.sleep(0.05)  # Schnelles Polling f√ºr den Button
